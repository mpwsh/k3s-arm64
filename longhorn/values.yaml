longhorn:
  # Default values for longhorn.
  # This is a YAML-formatted file.
  # Declare variables to be passed into your templates.
  global:
    cattle:
      # -- Default system registry.
      systemDefaultRegistry: ""
      windowsCluster:
        # -- Setting that allows Longhorn to run on a Rancher Windows cluster.
        enabled: false
        # -- Toleration for Linux nodes that can run user-deployed Longhorn components.
        tolerations:
          - key: "cattle.io/os"
            value: "linux"
            effect: "NoSchedule"
            operator: "Equal"
        # -- Node selector for Linux nodes that can run user-deployed Longhorn components.
        nodeSelector:
          kubernetes.io/os: "linux"
        defaultSetting:
          # -- Toleration for system-managed Longhorn components.
          taintToleration: cattle.io/os=linux:NoSchedule
          # -- Node selector for system-managed Longhorn components.
          systemManagedComponentsNodeSelector: kubernetes.io/os:linux

  networkPolicies:
    # -- Setting that allows you to enable network policies that control access to Longhorn pods.
    enabled: false
    # -- Distribution that determines the policy for allowing access for an ingress. (Options: "k3s", "rke2", "rke1")
    type: "k3s"

  image:
    longhorn:
      engine:
        tag: v1.6.2
      manager:
        tag: v1.6.2
      ui:
        tag: v1.6.2
      instanceManager:
        tag: v1.6.2
      shareManager:
        tag: v1.6.2
      backingImageManager:
        tag: v1.6.2
      supportBundleKit:
        tag: v0.0.37
    csi:
      attacher:
        tag: v4.5.1
      provisioner:
        tag: v3.6.4
      nodeDriverRegistrar:
        tag: v2.9.2
      resizer:
        tag: v1.10.1
      snapshotter:
        tag: v6.3.4
      livenessProbe:
        tag: v2.12.0
    pullPolicy: IfNotPresent

  ingress:
    enabled: true
    ingressClassName: nginx
    host: lh.mpw.sh
    ## Set this to true in order to enable TLS on the ingress record
    tls: true
    ## Enable this in order to enable that the backend service will be connected at port 443
    secureBackends: false
    ## If TLS is set to true, you must declare what secret will store the key/certificate for TLS
    tlsSecret: longhorn-tls

    ## If ingress is enabled you can set the default ingress path
    ## then you can access the UI by using the following full path {{host}}+{{path}}
    path: /

    ## Ingress annotations done as key:value pairs
    ## If you're using kube-lego, you will want to add:
    ## kubernetes.io/tls-acme: true
    ##
    ## For a full list of possible ingress annotations, please see
    ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/annotations.md
    ##
    ## If tls is set to true, annotation ingress.kubernetes.io/secure-backends: "true" will automatically be set
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      external-dns.alpha.kubernetes.io/hostname: lh.mpw.sh
      external-dns.alpha.kubernetes.io/target: k3s.mpw.sh
      external-dns.alpha.kubernetes.io/cloudflare-proxied: "false"
      external-dns.alpha.kubernetes.io/ttl: "60"
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/auth-secret: basic-auth
      nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
